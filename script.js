// --- script.js ---
console.log("--- script.js SCRIPT STARTED (Top of file) ---");

document.addEventListener('DOMContentLoaded', () => {
    console.log("--- DOMContentLoaded event fired ---");

    const welcomeContainer = document.getElementById('welcome-container');
    const nicknameInput = document.getElementById('nickname-input');
    const startQuizButton = document.getElementById('start-quiz-button');
    const userGreetingElement = document.getElementById('user-greeting');

    const quizContainer = document.getElementById('quiz-container');
    const questionArea = document.getElementById('question-area');
    const questionTextElement = document.getElementById('question-text');
    const optionsContainer = document.getElementById('options-container');

    const resultContainer = document.getElementById('result-container');
    const resultTitleElement = document.getElementById('result-title');
    const finalVibeTextElement = document.getElementById('final-vibe-text');
    const youtubePlayerWrapper = document.getElementById('youtube-player-wrapper');
    const restartButton = document.getElementById('restart-button');

    const typewriterElement = document.getElementById('typewriter-title');

    if (!welcomeContainer) console.error("CRITICAL ERROR: 'welcome-container' NOT FOUND!");
    // ... (ÂÖ∂‰ªñÂÖÉÁ¥†Ê™¢Êü•) ...
    if (!youtubePlayerWrapper) console.error("CRITICAL ERROR: 'youtube-player-wrapper' NOT FOUND!");
    if (!typewriterElement) console.warn("Warning: 'typewriter-title' element NOT FOUND, typewriter effect will not run.");

    let userNickname = "ÊúãÂèã";
    const questions = [
        { question: "Ôºå‰ªäÂ§©Êó©‰∏äÈÜí‰æÜÔºå‰Ω†ÁöÑÁ¨¨‰∏ÄÊÑüË¶∫ÊòØÔºü", options: [ { text: "ÈôΩÂÖâÊòéÂ™öÔºåÂÖÖÊªøÂππÂãÅÔºÅ", scores: { "ÈñãÂøÉ": 10, "ÊøÄÊòÇ": 5 } }, { text: "ÊúâÈªûÁñ≤ÂÄ¶Ôºå‰ΩÜÈÇÑË°å„ÄÇ", scores: { "ÊÜÇÈ¨±": 3, "Á•ûÁßò": 2 } }, { text: "Âπ≥ÈùúÔºåÊ∫ñÂÇôÂ•ΩËøéÊé•ÊåëÊà∞„ÄÇ", scores: { "ÈñãÂøÉ": 5, "Á•ûÁßò": 5 } }, { text: "‰∏çÊÉ≥Ëµ∑Â∫äÔºå‰∏ñÁïåËàáÊàëÁÑ°Èóú„ÄÇ", scores: { "ÊÜÇÈ¨±": 10 } } ] },
        { question: "ÔºåÂ¶ÇÊûúÁèæÂú®Êúâ‰∏ÄÊÆµÁ©∫ÈñíÊôÇÈñìÔºå‰Ω†ÊúÉÈÅ∏ÊìáÂÅö‰ªÄÈ∫ºÔºü", options: [ { text: "ËÅΩÁØÄÂ•èÊÑüÂº∑ÁöÑÈü≥Ê®ÇÔºåÂãïËµ∑‰æÜÔºÅ", scores: { "ÊøÄÊòÇ": 10, "ÈñãÂøÉ": 5 } }, { text: "Ê≥°ÊùØËå∂ÔºåÁúãÁ™óÂ§ñÁôºÂëÜ„ÄÇ", scores: { "ÊÜÇÈ¨±": 5, "Á•ûÁßò": 5 } }, { text: "Êé¢Á¥¢Êñ∞‰∫ãÁâ©Ôºå‰æãÂ¶ÇÁúã‰∏ÄÈÉ®Êá∏ÁñëÁâá„ÄÇ", scores: { "Á•ûÁßò": 10, "ÊøÄÊòÇ": 3 } }, { text: "ÂíåÊúãÂèãËÅäÂ§©ÔºåÂàÜ‰∫´Âø´Ê®Ç„ÄÇ", scores: { "ÈñãÂøÉ": 10 } } ] },
        { question: "Ôºå‰Ω†ÂÅèÊÑõÂì™Á®ÆÈ°ûÂûãÁöÑÈõªÂΩ±ÊàñÊïÖ‰∫ãÔºü", options: [ { text: "ÂÖÖÊªøÁÜ±Ë°ÄËàáÂÜíÈö™ÁöÑÂãï‰ΩúÁâá„ÄÇ", scores: { "ÊøÄÊòÇ": 10 } }, { text: "Ê∫´È¶®ÊÑü‰∫∫ÁöÑÂäáÊÉÖÁâá„ÄÇ", scores: { "ÈñãÂøÉ": 7, "ÊÜÇÈ¨±": 3 } }, { text: "Âºï‰∫∫Ê∑±ÊÄùÁöÑÂì≤Â≠∏ÊàñÁßëÂπªÊïÖ‰∫ã„ÄÇ", scores: { "Á•ûÁßò": 10, "ÊÜÇÈ¨±": 2 } }, { text: "ËºïÈ¨ÜÂπΩÈªòÁöÑÂñúÂäá„ÄÇ", scores: { "ÈñãÂøÉ": 10 } } ] },
        { question: "Ôºå‰Ω†Â∞ç„ÄåÊú™Áü•„ÄçÁöÑÊÑüË¶∫ÊòØÔºü", options: [ { text: "ÂÖÖÊªøÂ•ΩÂ•áÔºåË∫çË∫çÊ¨≤Ë©¶ÔºÅ", scores: { "ÊøÄÊòÇ": 7, "Á•ûÁßò": 7 } }, { text: "ÊúâÈªû‰∏çÂÆâÔºå‰ΩÜÂèØ‰ª•Êé•Âèó„ÄÇ", scores: { "ÊÜÇÈ¨±": 5, "ÈñãÂøÉ": 3 } }, { text: "ÁÑ°ÊÑüÔºåÈ†ÜÂÖ∂Ëá™ÁÑ∂„ÄÇ", scores: { "Á•ûÁßò": 3, "ÈñãÂøÉ": 3 } }, { text: "Áõ°ÈáèÈÅøÂÖçÔºåÂñúÊ≠°Á¢∫ÂÆöÁöÑ‰∫ãÁâ©„ÄÇ", scores: { "ÊÜÇÈ¨±": 7 } } ] }
    ];

    const vibePlaylists = {
        "ÈñãÂøÉ": "PLiK9lUE0b6aE3ApItsY_Hj-VIigT3Nsw3",
        "ÊÜÇÈ¨±": "PLokZVyVj5Ncr5jy0emi-v-MCRDK-2KSRw",
        "ÊøÄÊòÇ": "PLPEnC3mtptkuub_yFxlEXMPcrfRof6Tis",
        "Á•ûÁßò": "PLJozx4nEjLPHWukhjqt1n02lA6Od88pvx"
    };
    // !!! Ë´ãÁ¢∫‰øùÈÄô‰∫õÊï∏Â≠óÊòØ‰Ω†Êí≠ÊîæÊ∏ÖÂñÆÁöÑ„ÄêÂØ¶ÈöõÂΩ±ÁâáÊï∏Èáè‰∏äÈôê„Äë !!!
    const vibePlaylistCounts = {
        "ÈñãÂøÉ": 23, // ÁØÑ‰æãÔºåË´ãÊõøÊèõÊàêÂØ¶ÈöõÊï∏Èáè
        "ÊÜÇÈ¨±": 15, // ÁØÑ‰æã
        "ÊøÄÊòÇ": 40, // ÁØÑ‰æã
        "Á•ûÁßò": 18  // ÁØÑ‰æã
    };

    let currentQuestionIndex = 0;
    let scores = { "ÈñãÂøÉ": 0, "ÊÜÇÈ¨±": 0, "ÊøÄÊòÇ": 0, "Á•ûÁßò": 0 };

    const typewriterSentences = [
        "Ê≠£Âú®ÁÇ∫‰Ω†ÊêúÂ∞ã‰ªäÊó•ÁöÑÂ∞àÂ±¨ÊóãÂæã... üé∂", "‰Ω†ÁöÑÈùàÈ≠ÇÔºåÈÅ©Âêà‰ªÄÈ∫ºÊ®£ÁöÑËÅ≤Èü≥Ôºü ü§î", "ÊîæËºïÈ¨ÜÔºåÊàëÂÄëÂç≥Â∞áÊâìÈñã‰∏ÄÊâáÈÄöÂæÄËÅ≤Èü≥ÁöÑÈñÄ„ÄÇüö™‚ú®", "‰ªäÂ§©ÁöÑ‰Ω†ÔºåÊúÉÊòØÂì™Á®ÆÈ†ªÁéáÂÖ±ÊåØÔºü üîä", "ÂòøÔºÅ‰æÜÁúãÁúã‰ªäÂ§©‰Ω†ÊòØ‰ªÄÈ∫ºÊ≠åÔºÅ üéß", "Âà•Êªë‰∫ÜÔºåÈÄôË£°Êúâ‰∏ÄÈ¶ñÂ±¨Êñº‰Ω†ÁöÑÊ≠åÁ≠âËëó‰Ω†ÔºÅ ‚û°Ô∏èüéµ", "Áî®‰∏ÄÈ¶ñÊ≠åÔºåË™™Ë™™‰ªäÂ§©ÁöÑ‰Ω†„ÄÇüé§", "‰Ω†ÁöÑ‰ªäÊó•‰∏ªÈ°åÊõ≤Âç≥Â∞áÂá∫Áèæ... üé¨", "‰æÜÂêßÔºåÊåëÊà∞ÁúãÁúã‰Ω†ÊúÉÊòØÂì™È¶ñÊ≠åÁöÑ‰∏ªËßíÔºü üåü"
    ];
    let sentenceTypeIndex = 0;
    let charDisplayIndex = 0;
    let isDeletingText = false;
    const typingSpeedMs = 130;
    const erasingSpeedMs = 70;
    const delayBeforeEraseMs = 2000;
    const delayBeforeNextMs = 500;
    let typewriterTimeoutId = null;

    function typeWriterEffect() {
        if (!typewriterElement || !welcomeContainer || welcomeContainer.style.display === 'none') {
            if (typewriterTimeoutId) clearTimeout(typewriterTimeoutId);
            return;
        }
        const currentSentenceToType = typewriterSentences[sentenceTypeIndex];
        if (isDeletingText) {
            typewriterElement.textContent = currentSentenceToType.substring(0, charDisplayIndex - 1);
            charDisplayIndex--;
            if (charDisplayIndex === 0) {
                isDeletingText = false;
                sentenceTypeIndex = (sentenceTypeIndex + 1) % typewriterSentences.length;
                typewriterTimeoutId = setTimeout(typeWriterEffect, delayBeforeNextMs);
            } else {
                typewriterTimeoutId = setTimeout(typeWriterEffect, erasingSpeedMs);
            }
        } else {
            typewriterElement.textContent = currentSentenceToType.substring(0, charDisplayIndex + 1);
            charDisplayIndex++;
            if (charDisplayIndex === currentSentenceToType.length) {
                isDeletingText = true;
                typewriterTimeoutId = setTimeout(typeWriterEffect, delayBeforeEraseMs);
            } else {
                typewriterTimeoutId = setTimeout(typeWriterEffect, typingSpeedMs);
            }
        }
    }

    function startTypewriter() {
        if (typewriterElement && welcomeContainer && welcomeContainer.style.display !== 'none') {
            if (typewriterTimeoutId) clearTimeout(typewriterTimeoutId);
            typewriterElement.textContent = '';
            sentenceTypeIndex = 0;
            charDisplayIndex = 0;
            isDeletingText = false;
            console.log("Starting typewriter effect...");
            typewriterTimeoutId = setTimeout(typeWriterEffect, delayBeforeNextMs);
        }
    }

    function switchScreen(hideElement, showElement, callbackAfterShow) {
        const animationDuration = 600;
        if (hideElement) {
            hideElement.classList.remove('do-fade-in');
            hideElement.classList.add('do-fade-out');
            setTimeout(() => {
                hideElement.style.display = 'none';
                hideElement.classList.remove('do-fade-out');
                if (hideElement === welcomeContainer && typewriterTimeoutId) {
                    clearTimeout(typewriterTimeoutId);
                    console.log("Welcome screen hidden, typewriter stopped.");
                }
                if (showElement) proceedWithShow();
            }, animationDuration - 100);
        } else if (showElement) {
            proceedWithShow();
        }

        function proceedWithShow() {
            showElement.classList.remove('hidden', 'do-fade-out');
            showElement.style.display = 'block';
            showElement.classList.add('do-fade-in');
            if (showElement === welcomeContainer) {
                startTypewriter();
            }
            if (callbackAfterShow) {
                setTimeout(callbackAfterShow, animationDuration);
            }
        }
    }

    startQuizButton?.addEventListener('click', () => {
        const nickname = nicknameInput.value.trim();
        if (!nickname) {
            nicknameInput.classList.add('input-error-shake');
            setTimeout(() => nicknameInput.classList.remove('input-error-shake'), 500);
            return;
        }
        userNickname = nickname;
        localStorage.setItem('vibeNickname', userNickname);
        if(userGreetingElement) userGreetingElement.textContent = `Âó®Ôºå${userNickname}ÔºÅ`;
        switchScreen(welcomeContainer, quizContainer, loadQuestion);
    });

    restartButton?.addEventListener('click', resetQuiz);

    function loadQuestion() {
        if (quizContainer && quizContainer.style.display === 'none') {
             quizContainer.classList.remove('hidden');
             quizContainer.style.display = 'block';
        }
        if (currentQuestionIndex < questions.length) {
            const q = questions[currentQuestionIndex];
            if(questionTextElement) questionTextElement.textContent = userNickname + q.question;
            if(optionsContainer) optionsContainer.innerHTML = '';
            if (questionArea) {
                questionArea.classList.remove('hidden', 'do-fade-out');
                void questionArea.offsetWidth;
                questionArea.classList.add('do-fade-in');
            }
            q.options.forEach(opt => {
                const btn = document.createElement('button');
                btn.textContent = opt.text;
                btn.className = 'option-button';
                btn.addEventListener('click', () => selectOption(opt, btn));
                optionsContainer.appendChild(btn);
            });
        } else {
            switchScreen(quizContainer, resultContainer, displayResultsContent);
        }
    }

    function selectOption(optionData, buttonElement) {
        buttonElement.classList.add('disappearing');
        const btns = optionsContainer.querySelectorAll('.option-button');
        btns.forEach(btn => {
            if (btn !== buttonElement) btn.classList.add('disappearing-fast');
            btn.disabled = true;
        });
        for (const vibe in optionData.scores) {
            if(scores.hasOwnProperty(vibe)) {
                scores[vibe] += optionData.scores[vibe];
            }
        }
        setTimeout(() => {
            currentQuestionIndex++;
            if (questionArea) {
                questionArea.classList.remove('do-fade-in');
                questionArea.classList.add('do-fade-out');
                const questionAreaAnimationDuration = 500;
                setTimeout(() => {
                    questionArea.classList.remove('do-fade-out');
                    loadQuestion();
                }, questionAreaAnimationDuration);
            } else {
                loadQuestion();
            }
        }, 700);
    }

    function displayResultsContent() {
        console.log("Executing displayResultsContent() to embed YouTube iframe.");
        let maxScore = -Infinity, finalVibe = "ÈñãÂøÉ";
        for (const vibe in scores) {
            if (scores.hasOwnProperty(vibe) && scores[vibe] > maxScore) {
                maxScore = scores[vibe];
                finalVibe = vibe;
            }
        }
        if(resultTitleElement) resultTitleElement.textContent = `${userNickname}Ôºå‰Ω†‰ªäÂ§©ÁöÑ Vibe ÊòØ...`;
        if(finalVibeTextElement) finalVibeTextElement.textContent = finalVibe;

        const playlistId = vibePlaylists[finalVibe];
        const count = vibePlaylistCounts[finalVibe] || 1; // Á¢∫‰øù count Ëá≥Â∞ëÁÇ∫ 1
        const randomIndex = Math.floor(Math.random() * count);
        
        // *** ‰øÆÊîπÔºöÂ∞á mute ÂèÉÊï∏ÊîπÁÇ∫ 1ÔºåÂòóË©¶ÈùúÈü≥Ëá™ÂãïÊí≠Êîæ ***
        const embedUrl = `https://www.youtube.com/embed?listType=playlist&list=${playlistId}&index=${randomIndex}&autoplay=1&controls=1&mute=1`;

        console.log(`Playlist ID: ${playlistId}, Actual Video Count: ${count}, Chosen RandomIndex (0-based): ${randomIndex}`);
        console.log('FINAL YOUTUBE EMBED URL (mute=1):', embedUrl);

        if (youtubePlayerWrapper) {
            youtubePlayerWrapper.innerHTML = '';
            const iframe = document.createElement('iframe');
            iframe.id = 'youtube-player-iframe';
            iframe.width = '100%';
            iframe.height = '100%';
            iframe.src = embedUrl;
            iframe.title = "YouTube video player";
            iframe.frameBorder = "0";
            iframe.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";
            iframe.allowFullscreen = true;
            
            iframe.onload = () => console.log("YouTube iframe content loaded (embed). src:", iframe.src);
            iframe.onerror = (e) => {
                console.error("YouTube iframe FAILED to load content (embed):", iframe.src, "Error event:", e);
                youtubePlayerWrapper.innerHTML = "<p>Êä±Ê≠âÔºåÂΩ±ÁâáËºâÂÖ•Â§±Êïó„ÄÇÂèØËÉΩÊòØÂΩ±Áâá‰∏çÂÖÅË®±ÂµåÂÖ•„ÄÅÂú∞ÂçÄÈôêÂà∂ÊàñÁ∂≤Ë∑ØÂïèÈ°å„ÄÇË´ãÁ¢∫Ë™çÊí≠ÊîæÊ∏ÖÂñÆÂÖßÂÆπÊòØÂê¶Ê≠£Á¢∫ÔºåÊàñÁ®çÂæåÂÜçË©¶„ÄÇ</p>";
            };
            youtubePlayerWrapper.appendChild(iframe);
        } else {
            console.error("youtubePlayerWrapper not found for iframe embedding");
        }
    }

    function resetQuiz() {
        console.log("Executing resetQuiz()");
        currentQuestionIndex = 0;
        scores = { "ÈñãÂøÉ": 0, "ÊÜÇÈ¨±": 0, "ÊøÄÊòÇ": 0, "Á•ûÁßò": 0 };
        if(nicknameInput) nicknameInput.value = localStorage.getItem('vibeNickname') || '';
        if(youtubePlayerWrapper) youtubePlayerWrapper.innerHTML = '';
        switchScreen(resultContainer, welcomeContainer, startTypewriter);
        if (quizContainer) {
            quizContainer.style.display = 'none';
            quizContainer.classList.remove('do-fade-in', 'do-fade-out', 'hidden');
            quizContainer.classList.add('hidden');
        }
         if (questionArea) {
            questionArea.classList.remove('do-fade-in', 'do-fade-out');
        }
    }

    if(quizContainer) quizContainer.style.display = 'none';
    if(resultContainer) resultContainer.style.display = 'none';
    if(welcomeContainer) {
        welcomeContainer.style.display = 'block';
        startTypewriter();
    } else {
         console.error("CRITICAL ERROR during initial setup: 'welcome-container' NOT FOUND!");
    }
    
    console.log("--- DOMContentLoaded SCRIPT END ---");
});

console.log("--- script.js SCRIPT PARSED (End of file) ---");
